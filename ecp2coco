import os
import re
import datetime
import json
import numpy as np
import glob
import cv2
from scipy.io import loadmat
from PIL import Image
from itertools import groupby
from skimage import measure

#convert = lambda text: int(text) if text.isdigit() else text.lower()
#natrual_key = lambda key: [ convert(c) for c in re.split('([0-9]+)', key) ]

def resize_binary_mask(array, new_size):
    image = Image.fromarray(array.astype(np.uint8)*255)
    image = image.resize(new_size)
    return np.asarray(image).astype(np.bool_)

def close_contour(contour):
    if not np.array_equal(contour[0], contour[-1]):
        contour = np.vstack((contour, contour[0]))
    return contour

def binary_mask_to_rle(binary_mask):
    rle = {'counts': [], 'size': list(binary_mask.shape)}
    counts = rle.get('counts')
    for i, (value, elements) in enumerate(groupby(binary_mask.ravel(order='F'))):
        if i == 0 and value == 1:
                counts.append(0)
        counts.append(len(list(elements)))

    return rle

def binary_mask_to_polygon(binary_mask, tolerance=0):
    """Converts a binary mask to COCO polygon representation
    Args:
        binary_mask: a 2D binary numpy array where '1's represent the object
        tolerance: Maximum distance from original points of polygon to approximated
            polygonal chain. If tolerance is 0, the original coordinate array is returned.
    """
    polygons = []
    # pad mask to close contours of shapes which start and end at an edge
    padded_binary_mask = np.pad(binary_mask, pad_width=1, mode='constant', constant_values=0)
    contours = measure.find_contours(padded_binary_mask, 0.5)
    contours = np.subtract(contours, 1)
    for contour in contours:
        contour = close_contour(contour)
        contour = measure.approximate_polygon(contour, tolerance)
        if len(contour) < 3:
            continue
        contour = np.flip(contour, axis=1)
        segmentation = contour.ravel().tolist()
        # after padding and subtracting 1 we may get -0.5 points in our segmentation
        segmentation = [0 if i < 0 else i for i in segmentation]
        polygons.append(segmentation)

    return polygons

def create_image_info(image_id, file_name, image_size,
                      date_captured=datetime.datetime.utcnow().isoformat(' '),
                      license_id=1, coco_url="", flickr_url=""):

    image_info = {
            "id": image_id,
            "file_name": file_name,
            "width": image_size[0],
            "height": image_size[1],
            "date_captured": date_captured,
            "license": license_id,
            "coco_url": coco_url,
            "flickr_url": flickr_url
    }

    return image_info

def create_annotation_info(annotation_id, image_id, category_info, bounding_box, img_size):
    is_crowd = category_info['is_crowd']

    annotation_info = {
        "id": annotation_id,
        "image_id": image_id,
        "category_id": category_info["id"],
        "iscrowd": is_crowd,
        "bbox": bounding_box,
        "width": img_size[0],
        "height": img_size[1],
    }

    return annotation_info

INFO = {
    "description": "Example Dataset",
    "url": "https://github.com/waspinator/pycococreator",
    "version": "0.1.0",
    "year": 2019,
    "contributor": "ljp",
    "date_created": datetime.datetime.utcnow().isoformat(' ')
}

LICENSES = [
    {
        "id": 1,
        "name": "Attribution-NonCommercial-ShareAlike License",
        "url": "http://creativecommons.org/licenses/by-nc-sa/2.0/"
    }
]

CATEGORIES = [
    {
        'id': 0,
        'name': 'pedestrain',
        'supercategory': 'person',
    },
    {
        'id': 1,
        'name': 'bicycle-group',
        'supercategory': 'vehicle',
    },
    {
        'id': 2,
        'name': 'person-group-far-away',
        'supercategory': 'person',
    },
    {
        'id': 3,
        'name': 'scooter-group',
        'supercategory': 'vehicle',
    },
    {
        'id': 4,
        'name': 'co-rider',
        'supercategory': 'vehicle',
    },
    {
        'id': 5,
        'name': 'scooter',
        'supercategory': 'vehicle',
    },
    {
        'id': 6,
        'name': 'motorbike',
        'supercategory': 'vehicle',
    },
    {
        'id': 7,
        'name': 'bicycle',
        'supercategory': 'vehicle',
    },
    {
        'id': 8,
        'name': 'rider',
        'supercategory': 'person',
    },
    {
        'id': 9,
        'name': 'motorbike-group',
        'supercategory': 'vehicle',
    },
    {
        'id': 10,
        'name': 'rider+vehicle-group-far-away',
        'supercategory': 'vehicle',
    },
    {
        'id': 11,
        'name': 'None',
        'supercategory': 'None',
    },
    {
        'id': 12,
        'name': 'buggy-group',
        'supercategory': 'vehicle',
    },
    {
        'id': 13,
        'name': 'wheelchair-group',
        'supercategory': 'vehicle',
    },
    {
        'id': 14,
        'name': 'tricycle-group',
        'supercategory': 'vehicle',
    },
    {
        'id': 15,
        'name': 'buggy',
        'supercategory': 'vehicle',
    },
    {
        'id': 16,
        'name': 'wheelchair',
        'supercategory': 'vehicle',
    },
    {
        'id': 17,
        'name': 'tricycle',
        'supercategory': 'vehicle',
    },
]

def convert():
    # 18:0-17
    identity_lst = ['pedestrian', 'bicycle-group', 'person-group-far-away', 'scooter-group', 'co-rider', 'scooter', \
                    'motorbike', 'bicycle', 'rider', 'motorbike-group', 'rider+vehicle-group-far-away', None, \
                    'buggy-group', 'wheelchair-group', 'tricycle-group', 'buggy', 'wheelchair', 'tricycle']
    #类型对应的索引下标
    identity2index = dict(zip(identity_lst, range(0, len(identity_lst))))

    image_id = 1
    annotation_id = 1
    data_path = 'E:/od/dataset/EuroCity'  #check the path
    for night in ['night']:
        for phase in ['train', 'val']:
            coco_output = {
                "info": INFO,
                "licenses": LICENSES,
                "categories": CATEGORIES,
                "images": [],
                "annotations": []
            }
            box_num = 0
            ig_box_num = 0

            fold_path = '%s/ECP/%s/img/%s' % (data_path, night, phase)
            print(fold_path)
            fn_lst = glob.glob('%s/*/*.png' % fold_path)

            for img_name in fn_lst:
                image = Image.open(img_name)
                image_num1 =img_name.index('\\') + 2
                image_nn = img_name[image_num1:]
                image_num2 = image_nn.index('\\') + image_num1 + 1
                image_info = create_image_info(
                    image_id, img_name[image_num2:], image.size)
                coco_output["images"].append(image_info)

                if phase != 'test':
                    anno_fn = img_name.replace('img', 'labels').replace('png', 'json')

                    anno = json.load(open(anno_fn))

                    boxes = []
                    for each in anno['children']:
                        if len(each["children"]) > 0:
                            #print(each)
                            #print(img_name)
                            for each2 in each["children"]:
                                boxes.append([identity2index[each2["identity"]], float(each2['x0']), float(each2['y0']), \
                                              float(each2['x1']) - float(each2['x0']), float(each2['y1']) - float(each2['y0'])])
                                if "occluded>80" in each2['tags']:
                                    boxes[-1].append(1)
                                    # print('heavy occluded')
                                else:
                                    # print('normal')
                                    boxes[-1].append(0)
                            #print(boxes)
                        
                        boxes.append([identity2index[each["identity"]], float(each['x0']), float(each['y0']), \
                                        float(each['x1']) - float(each['x0']), float(each['y1']) - float(each['y0'])])
                        if "occluded>80" in each['tags']:
                            boxes[-1].append(1)
                            # print('heavy occluded')
                        else:
                            boxes[-1].append(0)

                    boxes = np.array(boxes)
                    if len(boxes) > 0:
                        # slt = np.logical_and(boxes[:, 0]==0, boxes[:, 4]>20, boxes[:, 5]<1)
                        slt = (boxes[:, 0]==0)
                        boxes_gt = boxes[slt, 0:5].tolist()
                        boxes_ig = boxes[~slt, 0:5].tolist()
                    else:
                        boxes_gt = []
                        boxes_ig = []
                    box_num += len(boxes_gt)
                    ig_box_num += len(boxes_ig)


                    for annotation in boxes_gt:
                        class_id = 1
                        category_info = {'id': int(annotation[0]), 'is_crowd': False}
                        annotation_info = create_annotation_info(
                            annotation_id, image_id, category_info, annotation[1:5],
                            image.size)
                        if annotation_info is not None:
                            coco_output["annotations"].append(annotation_info)
                        annotation_id += 1

                    # for annotation in boxes_ig:
                    #     if int(annotation[0])==11:
                    #         print(img_name)
                    #     category_info = {'id': int(annotation[0]), 'is_crowd': True}
                    #     annotation_info = create_annotation_info(
                    #         annotation_id, image_id, category_info, annotation[1:5], image.size)
                    #     if annotation_info is not None:
                    #         coco_output["annotations"].append(annotation_info)
                    #     annotation_id += 1

                image_id = image_id + 1

            with open(data_path + night + '_' + phase + '_all.json', 'w') as output_json_file:
                json.dump(coco_output, output_json_file)
            print('box num: ', box_num)
            print('ignore box num: ', ig_box_num)

if __name__ == '__main__':
    convert()
